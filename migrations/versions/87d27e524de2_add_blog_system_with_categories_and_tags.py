"""add blog system with categories and tags

Revision ID: 87d27e524de2
Revises: chapters_content_001
Create Date: 2025-09-16 11:49:02.442792

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '87d27e524de2'
down_revision = 'chapters_content_001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('slug', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=True)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('slug', sa.String(length=60), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_index(op.f('ix_tags_slug'), 'tags', ['slug'], unique=True)
    op.create_table('post_tags',
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('post_id', 'tag_id')
    )
    op.drop_constraint(op.f('course_enrollments_user_id_course_id_key'), 'course_enrollments', type_='unique')
    op.create_index(op.f('ix_course_enrollments_id'), 'course_enrollments', ['id'], unique=False)
    op.create_index(op.f('ix_courses_id'), 'courses', ['id'], unique=False)
    
    # Crear capítulos por defecto para cursos que tienen lecciones sin chapter_id
    connection = op.get_bind()
    connection.execute(sa.text("""
        INSERT INTO chapters (title, description, order_index, is_published, course_id, created_at)
        SELECT DISTINCT
            'Capítulo Principal' as title,
            'Capítulo creado automáticamente durante migración' as description,
            1 as order_index,
            true as is_published,
            l.course_id,
            NOW() as created_at
        FROM lessons l 
        WHERE l.chapter_id IS NULL 
        AND l.course_id IS NOT NULL
        AND NOT EXISTS (
            SELECT 1 FROM chapters c WHERE c.course_id = l.course_id
        )
    """))
    
    # Asignar chapter_id a las lecciones que no lo tienen
    connection.execute(sa.text("""
        UPDATE lessons 
        SET chapter_id = (
            SELECT id FROM chapters 
            WHERE chapters.course_id = lessons.course_id 
            LIMIT 1
        )
        WHERE chapter_id IS NULL AND course_id IS NOT NULL
    """))
    
    # Eliminar lecciones huérfanas (sin course_id)
    connection.execute(sa.text("DELETE FROM lessons WHERE course_id IS NULL"))
    
    op.alter_column('lessons', 'chapter_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_lessons_id'), 'lessons', ['id'], unique=False)
    op.drop_constraint(op.f('lessons_course_id_fkey'), 'lessons', type_='foreignkey')
    op.create_foreign_key(None, 'lessons', 'courses', ['course_id'], ['id'])
    op.drop_column('lessons', 'duration_minutes')
    op.add_column('posts', sa.Column('slug', sa.String(length=280), nullable=True))
    op.add_column('posts', sa.Column('excerpt', sa.Text(), nullable=True))
    op.add_column('posts', sa.Column('featured_image_url', sa.String(length=500), nullable=True))
    op.add_column('posts', sa.Column('featured_image_object_key', sa.String(length=500), nullable=True))
    op.add_column('posts', sa.Column('meta_title', sa.String(length=60), nullable=True))
    op.add_column('posts', sa.Column('meta_description', sa.String(length=160), nullable=True))
    op.add_column('posts', sa.Column('is_featured', sa.Boolean(), nullable=True))
    op.add_column('posts', sa.Column('published_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('posts', sa.Column('reading_time_minutes', sa.Integer(), nullable=True))
    op.add_column('posts', sa.Column('views_count', sa.Integer(), nullable=True))
    op.add_column('posts', sa.Column('category_id', sa.Integer(), nullable=True))
    
    # Generar slugs únicos para posts existentes
    connection.execute(sa.text("""
        UPDATE posts 
        SET slug = LOWER(REGEXP_REPLACE(
            REGEXP_REPLACE(title, '[^a-zA-Z0-9\\s\\-]', '', 'g'),
            '\\s+', '-', 'g'
        )) || '-' || id::text
        WHERE slug IS NULL
    """))
    
    # Ahora hacer el slug NOT NULL
    op.alter_column('posts', 'slug',
               existing_type=sa.String(length=280),
               nullable=False)
    
    op.create_index(op.f('ix_posts_slug'), 'posts', ['slug'], unique=True)
    op.create_foreign_key(None, 'posts', 'categories', ['category_id'], ['id'])
    op.drop_column('posts', 'cover_image_url')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('posts', sa.Column('cover_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'posts', type_='foreignkey')
    op.drop_index(op.f('ix_posts_slug'), table_name='posts')
    op.drop_column('posts', 'category_id')
    op.drop_column('posts', 'views_count')
    op.drop_column('posts', 'reading_time_minutes')
    op.drop_column('posts', 'published_at')
    op.drop_column('posts', 'is_featured')
    op.drop_column('posts', 'meta_description')
    op.drop_column('posts', 'meta_title')
    op.drop_column('posts', 'featured_image_object_key')
    op.drop_column('posts', 'featured_image_url')
    op.drop_column('posts', 'excerpt')
    op.drop_column('posts', 'slug')
    op.add_column('lessons', sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'lessons', type_='foreignkey')
    op.create_foreign_key(op.f('lessons_course_id_fkey'), 'lessons', 'courses', ['course_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_lessons_id'), table_name='lessons')
    op.alter_column('lessons', 'chapter_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_courses_id'), table_name='courses')
    op.drop_index(op.f('ix_course_enrollments_id'), table_name='course_enrollments')
    op.create_unique_constraint(op.f('course_enrollments_user_id_course_id_key'), 'course_enrollments', ['user_id', 'course_id'], postgresql_nulls_not_distinct=False)
    op.drop_table('post_tags')
    op.drop_index(op.f('ix_tags_slug'), table_name='tags')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_categories_slug'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###

